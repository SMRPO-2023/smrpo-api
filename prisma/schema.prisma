datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                   Int                @id @default(autoincrement())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  deletedAt            DateTime?
  lastLogin            DateTime?
  username             String             @unique
  email                String             @unique
  password             String
  firstname            String?
  lastname             String?
  role                 Role               @default(USER)
  storyComment         StoryComment[]
  developerProjects    ProjectDeveloper[]
  tasks                Task[]
  timeLogs             TimeLog[]
  posts                Post[]
  projectOwnerProjects Project[]          @relation("UserProjectOwner")
  ScrumMasterProjects  Project[]          @relation("UserScrumMaster")
}

/// user type
enum Role {
  ADMIN /// allowed to do everything
  USER
}

model Sprint {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  start       DateTime
  end         DateTime
  velocity    Int
  Project     Project?   @relation(fields: [projectId], references: [id])
  projectId   Int?
  UserStory   UserStory? @relation(fields: [userStoryId], references: [id])
  userStoryId Int?
}

model StoryComment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  userStoryId Int
  message     String
  User        User      @relation(fields: [userId], references: [id])
  userId      Int
  UserStory   UserStory @relation(fields: [userStoryId], references: [id])
}

model Task {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  title       String
  description String?
  hours       Int
  accepted    Boolean
  status      TaskStatus @default(UNASSIGNED)
  assignedTo  User?      @relation(fields: [userId], references: [id])
  userId      Int?
  timeLogs    TimeLog[]
  userStory   UserStory? @relation(fields: [userStoryId], references: [id])
  userStoryId Int?
}

enum TaskStatus {
  UNASSIGNED
  ASSIGNED
  FINISHED
  ACTIVE
}

model UserStory {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  title              String
  description        String?
  priority           StoryPriority
  points             Int?
  implemented        Boolean              @default(false)
  projectId          Int
  project            Project              @relation(fields: [projectId], references: [id])
  sprintId           Int?
  sprints            Sprint[]
  acceptanceCriteria AcceptanceCriteria[]
  comments           StoryComment[]
  Task               Task[]
  businessValue      String?
}

enum StoryPriority {
  MUST_HAVE
  COULD_HAVE
  SHOULD_HAVE
  WONT_HAVE
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  day       DateTime
  hours     Int
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  Task      Task?     @relation(fields: [taskId], references: [id])
  taskId    Int?
}

model AcceptanceCriteria {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  userStoryId Int
  title       String
  description String?
  completed   Boolean    @default(false)
  UserStory   UserStory? @relation(fields: [userStoryId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  published Boolean
  title     String
  content   String?
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId Int?
}

model ProjectDeveloper {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int
}

model Project {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  deletedAt      DateTime?
  title          String?
  documentation  String?
  projectOwner   User?              @relation(fields: [projectOwnerId], references: [id], name: "UserProjectOwner")
  scrumMaster    User?              @relation(fields: [scrumMasterId], references: [id], name: "UserScrumMaster")
  developers     ProjectDeveloper[]
  sprints        Sprint[]
  posts          Post[]
  UserStory      UserStory[]
  projectOwnerId Int?
  scrumMasterId  Int?
}
